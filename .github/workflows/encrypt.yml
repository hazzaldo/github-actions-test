name: encrypt
on: push

jobs:
  decrypt:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2.4.0
        - name: Decrypt my_secret.json file
        # gpg encryption tool command line is already installed on GitHub VMs so we can use it
          # --quite will limit the logs output of the gpg command
          # --batch will prevent any interactivity that happens with the gpg command line (e.g. where it may ask you to enter the passphrase as the human user). We don't want the command line to prompt anything for a user input. It should all happen automatically.
          # --yes for any prompt the gpg will provide, we will just answer with yes every time. As we cannot answer question on an automated workflow, so we assume the answer will always be yes
          # --output where we want to output the decrypted file, including the name you want to give the file, this is followed by the input (encrypted) file that you want to decrypt
          # since my_secret.json.gpg input file is already in our repo root directory, we don't need to specify the directory path for it. As the command line below will be executed at the repo root directory 
          run: |
            gpg --version
            gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output $HOME/my_secret.json my_secret.json.gpg
          env:
            # we need to make the passphrase of GPG encryption that we created as a secret in GitHub available here as an env var, so that the RUN GPG command in the line above can use it to decrypt our my_secret.json file
            PASSPHRASE: ${{ secrets.PASSPHRASE }}
        # this step is just to make sure our my_secret.json file has been decrypted successfully. By printing out its content. Don't do this step in production environment. 
        - name: Print our file content
          # cat just outputs the content of a file passed to it
          run: cat $HOME/my_secret.json