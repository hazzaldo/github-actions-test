name: ENV Variables
on: push
# setting up environment variables, where the keys will be the environment variable name and the value will be the value of the variable.
# Any of the environment variables declared will be available/accessible to all jobs in the workflow
env: 
  WF_ENV: Available to all jobs

jobs:
  decrypt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Decrypt my_secret.json file
      # gpg encryption tool command line is already installed on GitHub VMs so we can use it
        # --quite will limit the logs output of the gpg command
        # --batch will prevent any interactivity that happens with the gpg command line (e.g. where it may ask you to enter the passphrase as the human user). We don't want the command line to prompt anything for a user input. It should all happen automatically.
        # --yes for any prompt the gpg will provide, we will just answer with yes every time. As we cannot answer question on an automated workflow, so we assume the answer will always be yes
        # --output where we want to output the decrypted file, including the name you want to give the file, this is followed by the input (encrypted) file that you want to decrypt
        # since my_secret.json.gpg input file is already in our repo root directory, we don't need to specify the directory path for it. As the command line below will be executed at the repo root directory 
        run: gpg --quiet --batch --yes --decrypt --passphrase="PASSPHRASE" --output $HOME/my_secret.json my_secret.json.gpg
        env:
          # we need to make the passphrase of GPG encryption that we created as a secret in GitHub available here as an env var, so that the RUN GPG command in the line above can use it to decrypt our my_secret.json file
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
      # this step is just to make sure our my_secret.json file has been decrypted successfully. By printing out its content. Don't do this step in production environment. 
      - name: Print our file content
        # cat just outputs the content of a file passed to it
        run: cat $HOME/my_secret.json

  # commented out this job 'commit-random-file-to-repo' because it keeps adding a newly modified random.txt fle to the remote repo, and we're having to pull those changes locally every time this job is triggered.
  # commit-random-file-to-repo:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # In this step, instead of using Checkout Action, we're going to use Git commands to clone and checkout our repo on the VM where the job is running
  #     - name: push a random file
  #     # You need the format below for adding a remote, because from the VM where the job runs, it's not authenticated to your repo (unlike your local machine). Therefore you need to add the remote in the format below in order to pass your GITHUB_TOKEN and gain access permission for the VM to be able to conduct operations on the repo
  #     #  We used git config --global user.email "my-bot@bot.com" and user.name "my-bot", to set the git user with that username and email that to indicates that the file is being created and pushed automatically (and not by a person), therefore by a bot type user. You could leave it as your Git username if you wish. This is just an example demo
  #     # git branch --set-upstream-to=origin/master sets up an equivalent master branch on the remote 'origin', that becomes the upstream to the local master branch. So then you can do git pull to pull the remote master to the local master.  
  #     # Now we create our text file and add a random number init using command: echo $RANDOM >> random.txt. Then we commit this file and push it to the remote repo 
  #       run: |
  #         pwd
  #         ls -a
  #         git init
  #         git remote add origin "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
  #         git config --global user.email "my-bot@bot.com"
  #         git config --global user.name "my-bot"
  #         git fetch
  #         git checkout master
  #         git branch --set-upstream-to=origin/master
  #         git pull
  #         ls -a
  #         echo $RANDOM >> random.txt
  #         ls -a
  #         git add -A 
  #         git commit -m "add random number txt file to repo automatically"
  #         git push


  # This job is taken from the example 2 (calling REST API) of the GitHub documentation: https://docs.github.com/en/actions/security-guides/automatic-token-authentication 
  create_issue:
    runs-on: ubuntu-latest 
    permissions:
      issues: write 
    steps:
      - name: Create issue using REST API
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.sha }}",
            "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
            }' \
          --fail

  # this job will log the env var values
  log-env:
    runs-on: ubuntu-latest 
    # because the 'env' section here is declared inside a specific job, it will only be accessible within this job, i.e. 'log-env' job.
    env:
      JOB_ENV: Available to all steps in log-env job
    steps:
      # printing out the WF_ENV environment variable that we declared above in the env section
      - name: Log ENV Variables
        # this 'env' section is within this step ('Log ENV Variables'), therefore it's only accessible within this step
        env:
          STEP_ENV: Available to only this step
        # the part inside the ${} is actually saying output the value for the key WF_ENV, which is the the env var that we declared in the 'env' section. It works the same as Javascript with String Literals
        run: |
          echo "WF_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
      - name: Log Env Var 2
        run: |
          echo "WF_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
  # this job prints out all the default env vars provided to us by GitHub object
  log-default-github-env:
    runs-on: ubuntu-latest
    steps: 
      - name: Default ENV Variables
        run: |
          echo "HOME: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_ACTION: ${GITHUB_ACTION}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "WF_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
